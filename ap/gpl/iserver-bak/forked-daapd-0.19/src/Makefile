# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/forked-daapd
pkgincludedir = $(includedir)/forked-daapd
pkglibdir = $(libdir)/forked-daapd
pkglibexecdir = $(libexecdir)/forked-daapd
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = arm-unknown-linux-gnu
sbin_PROGRAMS = forked-daapd$(EXEEXT)
#am__append_1 = $(ANTLR_SOURCES)
#am__append_2 = \
#	$(ANTLR_PRODUCTS) \
#	$(ANTLR_GRAMMARS:.g=.u)

subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/libunistring.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(sbindir)"
PROGRAMS = $(sbin_PROGRAMS)
am__forked_daapd_SOURCES_DIST = main.c db.c db.h logger.c logger.h \
	conffile.c conffile.h filescanner.c filescanner.h \
	filescanner_ffmpeg.c filescanner_urlfile.c filescanner_m3u.c \
	filescanner_itunes.c mdns_avahi.c mdns.h remote_pairing.c \
	remote_pairing.h evhttp/http.c evhttp/evhttp.h \
	evhttp/http-internal.h evhttp/log.h ffmpeg_url_evbuffer.c \
	ffmpeg_url_evbuffer.h avio_evbuffer.c avio_evbuffer.h httpd.c \
	httpd.h httpd_rsp.c httpd_rsp.h httpd_daap.c httpd_daap.h \
	httpd_dacp.c httpd_dacp.h dmap_common.c dmap_common.h \
	transcode.c transcode.h artwork.c artwork.h misc.c misc.h \
	rng.c rng.h rsp_query.c rsp_query.h daap_query.c daap_query.h \
	player.c player.h laudio_alsa.c laudio_oss4.c laudio.h raop.c \
	raop.h evrtsp/rtsp.c evrtp/evrtsp.h evrtsp/rtsp-internal.h \
	evrtsp/log.h scan-wma.c scan-flac.c scan-mpc.c cache.c
#am__objects_1 =  \
#	forked_daapd-filescanner_itunes.$(OBJEXT)
am__objects_2 =  \
	forked_daapd-ffmpeg_url_evbuffer.$(OBJEXT)
am__objects_3 = forked_daapd-avio_evbuffer.$(OBJEXT)
am__objects_4 = forked_daapd-laudio_alsa.$(OBJEXT)
#am__objects_5 = forked_daapd-laudio_oss4.$(OBJEXT)
#am__objects_6 = forked_daapd-scan-flac.$(OBJEXT)
#am__objects_7 = forked_daapd-scan-mpc.$(OBJEXT)
am_forked_daapd_OBJECTS = forked_daapd-main.$(OBJEXT) \
	forked_daapd-db.$(OBJEXT) forked_daapd-logger.$(OBJEXT) \
	forked_daapd-conffile.$(OBJEXT) \
	forked_daapd-filescanner.$(OBJEXT) \
	forked_daapd-filescanner_ffmpeg.$(OBJEXT) \
	forked_daapd-filescanner_urlfile.$(OBJEXT) \
	forked_daapd-filescanner_m3u.$(OBJEXT) $(am__objects_1) \
	forked_daapd-mdns_avahi.$(OBJEXT) \
	forked_daapd-remote_pairing.$(OBJEXT) \
	forked_daapd-http.$(OBJEXT) $(am__objects_2) $(am__objects_3) \
	forked_daapd-httpd.$(OBJEXT) forked_daapd-httpd_rsp.$(OBJEXT) \
	forked_daapd-httpd_daap.$(OBJEXT) \
	forked_daapd-httpd_dacp.$(OBJEXT) \
	forked_daapd-dmap_common.$(OBJEXT) \
	forked_daapd-transcode.$(OBJEXT) \
	forked_daapd-artwork.$(OBJEXT) forked_daapd-misc.$(OBJEXT) \
	forked_daapd-rng.$(OBJEXT) forked_daapd-rsp_query.$(OBJEXT) \
	forked_daapd-daap_query.$(OBJEXT) \
	forked_daapd-cache.$(OBJEXT) \
	forked_daapd-player.$(OBJEXT) $(am__objects_4) \
	$(am__objects_5) forked_daapd-raop.$(OBJEXT) \
	forked_daapd-rtsp.$(OBJEXT) forked_daapd-scan-wma.$(OBJEXT) \
	$(am__objects_6) $(am__objects_7)
am__objects_8 = forked_daapd-RSPLexer.$(OBJEXT) \
	forked_daapd-RSPParser.$(OBJEXT) \
	forked_daapd-RSP2SQL.$(OBJEXT) \
	forked_daapd-DAAPLexer.$(OBJEXT) \
	forked_daapd-DAAPParser.$(OBJEXT) \
	forked_daapd-DAAP2SQL.$(OBJEXT)
nodist_forked_daapd_OBJECTS = $(am__objects_8)
forked_daapd_OBJECTS = $(am_forked_daapd_OBJECTS) \
	$(nodist_forked_daapd_OBJECTS)
forked_daapd_DEPENDENCIES =
forked_daapd_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(forked_daapd_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -shared -o $@
DEFAULT_INCLUDES = -I. -I$(DESTDIR)/usr/include -I..
depcomp = $(SHELL) $(top_srcdir)/depcomp 
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -shared -o $@
SOURCES = $(forked_daapd_SOURCES) $(nodist_forked_daapd_SOURCES)
DIST_SOURCES = $(am__forked_daapd_SOURCES_DIST)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} $(SRC_PATH)/forked-daapd-0.19/missing --run aclocal-1.11
ALSA_CFLAGS = -I$(DESTDIR)/usr/include/alsa  
ALSA_LIBS = $(DESTDIR)/usr/lib/libasound.so  
AMTAR = ${SHELL} $(SRC_PATH)/forked-daapd-0.19/missing --run tar
ANTLR = 
ANTLR3C_LIBS = -lantlr3c
AR = arm-brcm-linux-uclibcgnueabi-ar
AUTOCONF = ${SHELL} $(SRC_PATH)/forked-daapd-0.19/missing --run autoconf
AUTOHEADER = ${SHELL} $(SRC_PATH)/forked-daapd-0.19/missing --run autoheader
AUTOMAKE = ${SHELL} $(SRC_PATH)/forked-daapd-0.19/missing --run automake-1.11
AVAHI_CFLAGS = $(SRC_PATH)/build/usr/include
AVAHI_LIBS = $(SRC_PATH)/build/usr/lib
AWK = gawk
CC = arm-brcm-linux-uclibcgnueabi-gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -Os -O2 -DBCMWPA2 -DRESTART_ALL_PROCESSES -D__CONFIG_USBAP__ -DBCMQOS -DBCMWPS -D__CONFIG_EMF__ -DPHYMON -DU12H240 -DR6300v2 -DBCM53125 -DBCM5301X  -DLINUX26 -DINCLUDE_IPV6  -DPLC -Os -DCONFIG_KERNEL_2_6_36 -I$(DESTDIR)/usr/include -Wall -D_LARGEFILE_SOURCE
CONFUSE_CFLAGS =  
CONFUSE_LIBS = -lconfuse  
CPP = arm-brcm-linux-uclibcgnueabi-gcc -E
CPPFLAGS = -I$(SRC_PATH)/build/usr/include
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
FLAC_CFLAGS = 
FLAC_LIBS = 
GPERF = gperf
GPG_ERROR_CFLAGS = 
GPG_ERROR_CONFIG = $(SRC_PATH)/build/usr/bin/gpg-error-config
GPG_ERROR_LIBS = -lgpg-error
GREP = /bin/grep
HAVE_LIBUNISTRING = yes
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = arm-brcm-linux-uclibcgnueabi-ld
LDFLAGS = -L$(DESTDIR)/usr/lib
LIBAVL_LIBS = -lavl
LIBAV_CFLAGS = $(SRC_PATH)/build/usr/include
LIBAV_LIBS = $(DESTDIR)/usr/lib
LIBEVENT_LIBS = -levent_core
LIBGCRYPT_CFLAGS = $(SRC_PATH)/build/usr/include 
LIBGCRYPT_CONFIG = $(SRC_PATH)/build/usr/bin/libgcrypt-config
LIBGCRYPT_LIBS = $(DESTDIR)/usr/lib
LIBICONV = $(DESTDIR)/usr/lib/libiconv.so
LIBOBJS = 
LIBPLIST_CFLAGS = 
LIBPLIST_LIBS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBUNISTRING = $(DESTDIR)/usr/lib/libunistring.so $(DESTDIR)/usr/lib/libiconv.so
LIBUNISTRING_PREFIX = 
LIPO = 
LN_S = ln -s
LTLIBICONV = -liconv
LTLIBOBJS = 
LTLIBUNISTRING = -lunistring -liconv
MAKEINFO = ${SHELL} $(SRC_PATH)/forked-daapd-0.19/missing --run makeinfo
MANIFEST_TOOL = :
MINIXML_CFLAGS = $(SRC_PATH)/build/usr/include
MINIXML_LIBS = $(DESTDIR)/usr/lib
MKDIR_P = /bin/mkdir -p
NM = arm-brcm-linux-uclibcgnueabi-nm
NMEDIT = 
OBJDUMP = arm-brcm-linux-uclibcgnueabi-objdump
OBJEXT = o
OSS4CPPFLAGS = 
OTOOL = 
OTOOL64 = 
PACKAGE = forked-daapd
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = $(SRC_PATH)/build/usr/lib/pkgconfig
PKG_CONFIG_PATH = $(SRC_PATH)/build/usr/lib/pkgconfig
RANLIB = arm-brcm-linux-uclibcgnueabi-ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
SQLITE3_CFLAGS = $(SRC_PATH)/build/usr/include
SQLITE3_LIBS = $(DESTDIR)/usr/lib/libsqlite3.so
STRIP = arm-brcm-linux-uclibcgnueabi-strip
TAGLIB_CFLAGS = 
TAGLIB_LIBS = 
VERSION = 0.19
ZLIB_CFLAGS =  
ZLIB_LIBS = -lz  
abs_builddir = $(SRC_PATH)/forked-daapd-0.19/src
abs_srcdir = $(SRC_PATH)/forked-daapd-0.19/src
abs_top_builddir = $(SRC_PATH)/forked-daapd-0.19
abs_top_srcdir = $(SRC_PATH)/forked-daapd-0.19
ac_ct_AR = 
ac_ct_CC = 
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = arm-unknown-linux-gnu
host_alias = arm-linux
host_cpu = arm
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} $(SRC_PATH)/forked-daapd-0.19/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = /var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = /etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
#FLACSRC = scan-flac.c
#MUSEPACKSRC = scan-mpc.c
#ITUNESSRC = filescanner_itunes.c
ALSASRC = laudio_alsa.c
#OSS4SRC = laudio_oss4.c
AVIO_SRC = avio_evbuffer.c avio_evbuffer.h
FFURL_SRC = ffmpeg_url_evbuffer.c ffmpeg_url_evbuffer.h
GPERF_FILES = \
	daap_query.gperf \
	rsp_query.gperf \
	dacp_prop.gperf \
	dmap_fields.gperf

GPERF_PRODUCTS = \
	daap_query_hash.c \
	rsp_query_hash.c \
	dacp_prop_hash.c \
	dmap_fields_hash.c

ANTLR_GRAMMARS = \
	RSP.g RSP2SQL.g \
	DAAP.g DAAP2SQL.g

ANTLR_SOURCES = \
	RSPLexer.c RSPLexer.h RSPParser.c RSPParser.h \
	RSP2SQL.c RSP2SQL.h \
	DAAPLexer.c DAAPLexer.h DAAPParser.c DAAPParser.h \
	DAAP2SQL.c DAAP2SQL.h

ANTLR_PRODUCTS = 
forked_daapd_CPPFLAGS = -D_GNU_SOURCE \
	-DDATADIR="\"$(pkgdatadir)\"" -DCONFDIR="\"$(sysconfdir)\"" \
	-DSTATEDIR="\"$(localstatedir)\"" -DPKGLIBDIR="\"$(pkglibdir)\"" \
	

forked_daapd_CFLAGS = \
	-I$(DESTDIR)/usr/include -I$(DESTDIR)/usr/include/alsa  

forked_daapd_LDADD = -lrt \
	-lz   $(DESTDIR)/usr/lib/libavahi-common.so  \
	$(DESTDIR)/usr/lib/libavahi-client.so \
	$(DESTDIR)/usr/lib/libsqlite3.so \
	-lavcodec -lavformat -lswscale -lavutil   \
	-lconfuse   -levent  \
	-lavl -lmxml -lpthread   -lantlr3c  \
	-L$(DESTDIR)/usr/lib \
	$(DESTDIR)/usr/lib/libgcrypt.so \
	$(DESTDIR)/usr/lib/libgpg-error.so \
	$(DESTDIR)/usr/lib/libasound.so \
	-lunistring \
	-Wl,-Bsymbolic-functions -Wl,-z,relro -ltre

forked_daapd_SOURCES = main.c \
	db.c db.h \
	logger.c logger.h \
	conffile.c conffile.h \
	filescanner.c filescanner.h \
	filescanner_ffmpeg.c filescanner_urlfile.c filescanner_m3u.c $(ITUNESSRC) \
	mdns_avahi.c mdns.h \
	remote_pairing.c remote_pairing.h \
	evhttp/http.c evhttp/evhttp.h \
	evhttp/http-internal.h evhttp/log.h \
	$(FFURL_SRC) $(AVIO_SRC) \
	httpd.c httpd.h \
	httpd_rsp.c httpd_rsp.h \
	httpd_daap.c httpd_daap.h \
	httpd_dacp.c httpd_dacp.h \
	dmap_common.c dmap_common.h \
	transcode.c transcode.h \
	artwork.c artwork.h \
	misc.c misc.h \
	rng.c rng.h \
	rsp_query.c rsp_query.h \
	daap_query.c daap_query.h \
	player.c player.h \
	$(ALSASRC) $(OSS4SRC) laudio.h \
	raop.c raop.h \
	evrtsp/rtsp.c evrtp/evrtsp.h \
	evrtsp/rtsp-internal.h evrtsp/log.h \
	scan-wma.c \
	$(FLACSRC) $(MUSEPACKSRC)

nodist_forked_daapd_SOURCES = \
	$(ANTLR_SOURCES)

BUILT_SOURCES = $(GPERF_PRODUCTS) $(am__append_1)
EXTRA_DIST = \
	$(ANTLR_GRAMMARS) \
	scan-mpc.c \
	scan-flac.c

CLEANFILES = $(GPERF_PRODUCTS) $(am__append_2)

# Support for building the parsers when ANTLR3 is available
#SUFFIXES = .g .u
DISTCLEANFILES = \
	$(ANTLR_PRODUCTS) \
	$(ANTLR_GRAMMARS:.g=.u)

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .g .u .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
#	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
#	$(am__cd) $(top_srcdir) && \
#	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-sbinPROGRAMS: $(sbin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(sbindir)" || $(MKDIR_P) "$(DESTDIR)$(sbindir)"
	@list='$(sbin_PROGRAMS)'; test -n "$(sbindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(sbindir)$$dir'"; \
	$(STRIP) $$files; \
	$(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(sbindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-sbinPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(sbin_PROGRAMS)'; test -n "$(sbindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(sbindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(sbindir)" && rm -f $$files

clean-sbinPROGRAMS:
	@list='$(sbin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
forked-daapd$(EXEEXT): $(forked_daapd_OBJECTS) $(forked_daapd_DEPENDENCIES) 
	@rm -f forked-daapd$(EXEEXT)
#	$(CCLD) $(forked_daapd_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -shared -o $@  \
	$(forked_daapd_OBJECTS) $(forked_daapd_LDADD) $(LIBS) 
	$(forked_daapd_LINK) $(forked_daapd_OBJECTS) $(forked_daapd_LDADD) $(LIBS) -ldbus-1 $(DESTDIR)/usr/lib/libiconv.so

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/forked_daapd-DAAP2SQL.Po
include ./$(DEPDIR)/forked_daapd-DAAPLexer.Po
include ./$(DEPDIR)/forked_daapd-DAAPParser.Po
include ./$(DEPDIR)/forked_daapd-RSP2SQL.Po
include ./$(DEPDIR)/forked_daapd-RSPLexer.Po
include ./$(DEPDIR)/forked_daapd-RSPParser.Po
include ./$(DEPDIR)/forked_daapd-artwork.Po
include ./$(DEPDIR)/forked_daapd-avio_evbuffer.Po
include ./$(DEPDIR)/forked_daapd-conffile.Po
include ./$(DEPDIR)/forked_daapd-daap_query.Po
include ./$(DEPDIR)/forked_daapd-db.Po
include ./$(DEPDIR)/forked_daapd-dmap_common.Po
include ./$(DEPDIR)/forked_daapd-ffmpeg_url_evbuffer.Po
include ./$(DEPDIR)/forked_daapd-filescanner.Po
include ./$(DEPDIR)/forked_daapd-filescanner_ffmpeg.Po
include ./$(DEPDIR)/forked_daapd-filescanner_itunes.Po
include ./$(DEPDIR)/forked_daapd-filescanner_m3u.Po
include ./$(DEPDIR)/forked_daapd-filescanner_urlfile.Po
include ./$(DEPDIR)/forked_daapd-http.Po
include ./$(DEPDIR)/forked_daapd-httpd.Po
include ./$(DEPDIR)/forked_daapd-httpd_daap.Po
include ./$(DEPDIR)/forked_daapd-httpd_dacp.Po
include ./$(DEPDIR)/forked_daapd-httpd_rsp.Po
include ./$(DEPDIR)/forked_daapd-laudio_alsa.Po
include ./$(DEPDIR)/forked_daapd-laudio_oss4.Po
include ./$(DEPDIR)/forked_daapd-logger.Po
include ./$(DEPDIR)/forked_daapd-main.Po
include ./$(DEPDIR)/forked_daapd-mdns_avahi.Po
include ./$(DEPDIR)/forked_daapd-misc.Po
include ./$(DEPDIR)/forked_daapd-player.Po
include ./$(DEPDIR)/forked_daapd-raop.Po
include ./$(DEPDIR)/forked_daapd-remote_pairing.Po
include ./$(DEPDIR)/forked_daapd-rng.Po
include ./$(DEPDIR)/forked_daapd-rsp_query.Po
include ./$(DEPDIR)/forked_daapd-rtsp.Po
include ./$(DEPDIR)/forked_daapd-scan-flac.Po
include ./$(DEPDIR)/forked_daapd-scan-mpc.Po
include ./$(DEPDIR)/forked_daapd-scan-wma.Po
include ./$(DEPDIR)/forked_daapd-transcode.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

forked_daapd-main.o: main.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-main.o -MD -MP -MF $(DEPDIR)/forked_daapd-main.Tpo -c -o forked_daapd-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c
	$(am__mv) $(DEPDIR)/forked_daapd-main.Tpo $(DEPDIR)/forked_daapd-main.Po

forked_daapd-cache.o: cache.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-cache.o -MD -MP -MF $(DEPDIR)/forked_daapd-cache.Tpo -c -o forked_daapd-cache.o `test -f 'cache.c' || echo '$(srcdir)/'`cache.c
	$(am__mv) $(DEPDIR)/forked_daapd-cache.Tpo $(DEPDIR)/forked_daapd-cache.Po


forked_daapd-main.obj: main.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-main.obj -MD -MP -MF $(DEPDIR)/forked_daapd-main.Tpo -c -o forked_daapd-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-main.Tpo $(DEPDIR)/forked_daapd-main.Po
#	source='main.c' object='forked_daapd-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`

forked_daapd-db.o: db.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-db.o -MD -MP -MF $(DEPDIR)/forked_daapd-db.Tpo -c -o forked_daapd-db.o `test -f 'db.c' || echo '$(srcdir)/'`db.c
	$(am__mv) $(DEPDIR)/forked_daapd-db.Tpo $(DEPDIR)/forked_daapd-db.Po
#	source='db.c' object='forked_daapd-db.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-db.o `test -f 'db.c' || echo '$(srcdir)/'`db.c

forked_daapd-db.obj: db.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-db.obj -MD -MP -MF $(DEPDIR)/forked_daapd-db.Tpo -c -o forked_daapd-db.obj `if test -f 'db.c'; then $(CYGPATH_W) 'db.c'; else $(CYGPATH_W) '$(srcdir)/db.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-db.Tpo $(DEPDIR)/forked_daapd-db.Po
#	source='db.c' object='forked_daapd-db.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-db.obj `if test -f 'db.c'; then $(CYGPATH_W) 'db.c'; else $(CYGPATH_W) '$(srcdir)/db.c'; fi`

forked_daapd-logger.o: logger.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-logger.o -MD -MP -MF $(DEPDIR)/forked_daapd-logger.Tpo -c -o forked_daapd-logger.o `test -f 'logger.c' || echo '$(srcdir)/'`logger.c
	$(am__mv) $(DEPDIR)/forked_daapd-logger.Tpo $(DEPDIR)/forked_daapd-logger.Po
#	source='logger.c' object='forked_daapd-logger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-logger.o `test -f 'logger.c' || echo '$(srcdir)/'`logger.c

forked_daapd-logger.obj: logger.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-logger.obj -MD -MP -MF $(DEPDIR)/forked_daapd-logger.Tpo -c -o forked_daapd-logger.obj `if test -f 'logger.c'; then $(CYGPATH_W) 'logger.c'; else $(CYGPATH_W) '$(srcdir)/logger.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-logger.Tpo $(DEPDIR)/forked_daapd-logger.Po
#	source='logger.c' object='forked_daapd-logger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-logger.obj `if test -f 'logger.c'; then $(CYGPATH_W) 'logger.c'; else $(CYGPATH_W) '$(srcdir)/logger.c'; fi`

forked_daapd-conffile.o: conffile.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-conffile.o -MD -MP -MF $(DEPDIR)/forked_daapd-conffile.Tpo -c -o forked_daapd-conffile.o `test -f 'conffile.c' || echo '$(srcdir)/'`conffile.c
	$(am__mv) $(DEPDIR)/forked_daapd-conffile.Tpo $(DEPDIR)/forked_daapd-conffile.Po
#	source='conffile.c' object='forked_daapd-conffile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-conffile.o `test -f 'conffile.c' || echo '$(srcdir)/'`conffile.c

forked_daapd-conffile.obj: conffile.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-conffile.obj -MD -MP -MF $(DEPDIR)/forked_daapd-conffile.Tpo -c -o forked_daapd-conffile.obj `if test -f 'conffile.c'; then $(CYGPATH_W) 'conffile.c'; else $(CYGPATH_W) '$(srcdir)/conffile.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-conffile.Tpo $(DEPDIR)/forked_daapd-conffile.Po
#	source='conffile.c' object='forked_daapd-conffile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-conffile.obj `if test -f 'conffile.c'; then $(CYGPATH_W) 'conffile.c'; else $(CYGPATH_W) '$(srcdir)/conffile.c'; fi`

forked_daapd-filescanner.o: filescanner.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner.o -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner.Tpo -c -o forked_daapd-filescanner.o `test -f 'filescanner.c' || echo '$(srcdir)/'`filescanner.c
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner.Tpo $(DEPDIR)/forked_daapd-filescanner.Po
#	source='filescanner.c' object='forked_daapd-filescanner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner.o `test -f 'filescanner.c' || echo '$(srcdir)/'`filescanner.c

forked_daapd-filescanner.obj: filescanner.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner.obj -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner.Tpo -c -o forked_daapd-filescanner.obj `if test -f 'filescanner.c'; then $(CYGPATH_W) 'filescanner.c'; else $(CYGPATH_W) '$(srcdir)/filescanner.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner.Tpo $(DEPDIR)/forked_daapd-filescanner.Po
#	source='filescanner.c' object='forked_daapd-filescanner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner.obj `if test -f 'filescanner.c'; then $(CYGPATH_W) 'filescanner.c'; else $(CYGPATH_W) '$(srcdir)/filescanner.c'; fi`

forked_daapd-filescanner_ffmpeg.o: filescanner_ffmpeg.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_ffmpeg.o -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_ffmpeg.Tpo -c -o forked_daapd-filescanner_ffmpeg.o `test -f 'filescanner_ffmpeg.c' || echo '$(srcdir)/'`filescanner_ffmpeg.c
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_ffmpeg.Tpo $(DEPDIR)/forked_daapd-filescanner_ffmpeg.Po
#	source='filescanner_ffmpeg.c' object='forked_daapd-filescanner_ffmpeg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_ffmpeg.o `test -f 'filescanner_ffmpeg.c' || echo '$(srcdir)/'`filescanner_ffmpeg.c

forked_daapd-filescanner_ffmpeg.obj: filescanner_ffmpeg.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_ffmpeg.obj -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_ffmpeg.Tpo -c -o forked_daapd-filescanner_ffmpeg.obj `if test -f 'filescanner_ffmpeg.c'; then $(CYGPATH_W) 'filescanner_ffmpeg.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_ffmpeg.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_ffmpeg.Tpo $(DEPDIR)/forked_daapd-filescanner_ffmpeg.Po
#	source='filescanner_ffmpeg.c' object='forked_daapd-filescanner_ffmpeg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_ffmpeg.obj `if test -f 'filescanner_ffmpeg.c'; then $(CYGPATH_W) 'filescanner_ffmpeg.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_ffmpeg.c'; fi`

forked_daapd-filescanner_urlfile.o: filescanner_urlfile.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_urlfile.o -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_urlfile.Tpo -c -o forked_daapd-filescanner_urlfile.o `test -f 'filescanner_urlfile.c' || echo '$(srcdir)/'`filescanner_urlfile.c
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_urlfile.Tpo $(DEPDIR)/forked_daapd-filescanner_urlfile.Po
#	source='filescanner_urlfile.c' object='forked_daapd-filescanner_urlfile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_urlfile.o `test -f 'filescanner_urlfile.c' || echo '$(srcdir)/'`filescanner_urlfile.c

forked_daapd-filescanner_urlfile.obj: filescanner_urlfile.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_urlfile.obj -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_urlfile.Tpo -c -o forked_daapd-filescanner_urlfile.obj `if test -f 'filescanner_urlfile.c'; then $(CYGPATH_W) 'filescanner_urlfile.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_urlfile.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_urlfile.Tpo $(DEPDIR)/forked_daapd-filescanner_urlfile.Po
#	source='filescanner_urlfile.c' object='forked_daapd-filescanner_urlfile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_urlfile.obj `if test -f 'filescanner_urlfile.c'; then $(CYGPATH_W) 'filescanner_urlfile.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_urlfile.c'; fi`

forked_daapd-filescanner_m3u.o: filescanner_m3u.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_m3u.o -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_m3u.Tpo -c -o forked_daapd-filescanner_m3u.o `test -f 'filescanner_m3u.c' || echo '$(srcdir)/'`filescanner_m3u.c
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_m3u.Tpo $(DEPDIR)/forked_daapd-filescanner_m3u.Po
#	source='filescanner_m3u.c' object='forked_daapd-filescanner_m3u.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_m3u.o `test -f 'filescanner_m3u.c' || echo '$(srcdir)/'`filescanner_m3u.c

forked_daapd-filescanner_m3u.obj: filescanner_m3u.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_m3u.obj -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_m3u.Tpo -c -o forked_daapd-filescanner_m3u.obj `if test -f 'filescanner_m3u.c'; then $(CYGPATH_W) 'filescanner_m3u.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_m3u.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_m3u.Tpo $(DEPDIR)/forked_daapd-filescanner_m3u.Po
#	source='filescanner_m3u.c' object='forked_daapd-filescanner_m3u.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_m3u.obj `if test -f 'filescanner_m3u.c'; then $(CYGPATH_W) 'filescanner_m3u.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_m3u.c'; fi`

forked_daapd-filescanner_itunes.o: filescanner_itunes.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_itunes.o -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_itunes.Tpo -c -o forked_daapd-filescanner_itunes.o `test -f 'filescanner_itunes.c' || echo '$(srcdir)/'`filescanner_itunes.c
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_itunes.Tpo $(DEPDIR)/forked_daapd-filescanner_itunes.Po
#	source='filescanner_itunes.c' object='forked_daapd-filescanner_itunes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_itunes.o `test -f 'filescanner_itunes.c' || echo '$(srcdir)/'`filescanner_itunes.c

forked_daapd-filescanner_itunes.obj: filescanner_itunes.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-filescanner_itunes.obj -MD -MP -MF $(DEPDIR)/forked_daapd-filescanner_itunes.Tpo -c -o forked_daapd-filescanner_itunes.obj `if test -f 'filescanner_itunes.c'; then $(CYGPATH_W) 'filescanner_itunes.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_itunes.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-filescanner_itunes.Tpo $(DEPDIR)/forked_daapd-filescanner_itunes.Po
#	source='filescanner_itunes.c' object='forked_daapd-filescanner_itunes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-filescanner_itunes.obj `if test -f 'filescanner_itunes.c'; then $(CYGPATH_W) 'filescanner_itunes.c'; else $(CYGPATH_W) '$(srcdir)/filescanner_itunes.c'; fi`

forked_daapd-mdns_avahi.o: mdns_avahi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-mdns_avahi.o -MD -MP -MF $(DEPDIR)/forked_daapd-mdns_avahi.Tpo -c -o forked_daapd-mdns_avahi.o `test -f 'mdns_avahi.c' || echo '$(srcdir)/'`mdns_avahi.c
	$(am__mv) $(DEPDIR)/forked_daapd-mdns_avahi.Tpo $(DEPDIR)/forked_daapd-mdns_avahi.Po
#	source='mdns_avahi.c' object='forked_daapd-mdns_avahi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-mdns_avahi.o `test -f 'mdns_avahi.c' || echo '$(srcdir)/'`mdns_avahi.c

forked_daapd-mdns_avahi.obj: mdns_avahi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-mdns_avahi.obj -MD -MP -MF $(DEPDIR)/forked_daapd-mdns_avahi.Tpo -c -o forked_daapd-mdns_avahi.obj `if test -f 'mdns_avahi.c'; then $(CYGPATH_W) 'mdns_avahi.c'; else $(CYGPATH_W) '$(srcdir)/mdns_avahi.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-mdns_avahi.Tpo $(DEPDIR)/forked_daapd-mdns_avahi.Po
#	source='mdns_avahi.c' object='forked_daapd-mdns_avahi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-mdns_avahi.obj `if test -f 'mdns_avahi.c'; then $(CYGPATH_W) 'mdns_avahi.c'; else $(CYGPATH_W) '$(srcdir)/mdns_avahi.c'; fi`

forked_daapd-remote_pairing.o: remote_pairing.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-remote_pairing.o -MD -MP -MF $(DEPDIR)/forked_daapd-remote_pairing.Tpo -c -o forked_daapd-remote_pairing.o `test -f 'remote_pairing.c' || echo '$(srcdir)/'`remote_pairing.c
	$(am__mv) $(DEPDIR)/forked_daapd-remote_pairing.Tpo $(DEPDIR)/forked_daapd-remote_pairing.Po
#	source='remote_pairing.c' object='forked_daapd-remote_pairing.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-remote_pairing.o `test -f 'remote_pairing.c' || echo '$(srcdir)/'`remote_pairing.c

forked_daapd-remote_pairing.obj: remote_pairing.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-remote_pairing.obj -MD -MP -MF $(DEPDIR)/forked_daapd-remote_pairing.Tpo -c -o forked_daapd-remote_pairing.obj `if test -f 'remote_pairing.c'; then $(CYGPATH_W) 'remote_pairing.c'; else $(CYGPATH_W) '$(srcdir)/remote_pairing.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-remote_pairing.Tpo $(DEPDIR)/forked_daapd-remote_pairing.Po
#	source='remote_pairing.c' object='forked_daapd-remote_pairing.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-remote_pairing.obj `if test -f 'remote_pairing.c'; then $(CYGPATH_W) 'remote_pairing.c'; else $(CYGPATH_W) '$(srcdir)/remote_pairing.c'; fi`

forked_daapd-http.o: evhttp/http.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-http.o -MD -MP -MF $(DEPDIR)/forked_daapd-http.Tpo -c -o forked_daapd-http.o `test -f 'evhttp/http.c' || echo '$(srcdir)/'`evhttp/http.c
	$(am__mv) $(DEPDIR)/forked_daapd-http.Tpo $(DEPDIR)/forked_daapd-http.Po
#	source='evhttp/http.c' object='forked_daapd-http.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-http.o `test -f 'evhttp/http.c' || echo '$(srcdir)/'`evhttp/http.c

forked_daapd-http.obj: evhttp/http.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-http.obj -MD -MP -MF $(DEPDIR)/forked_daapd-http.Tpo -c -o forked_daapd-http.obj `if test -f 'evhttp/http.c'; then $(CYGPATH_W) 'evhttp/http.c'; else $(CYGPATH_W) '$(srcdir)/evhttp/http.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-http.Tpo $(DEPDIR)/forked_daapd-http.Po
#	source='evhttp/http.c' object='forked_daapd-http.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-http.obj `if test -f 'evhttp/http.c'; then $(CYGPATH_W) 'evhttp/http.c'; else $(CYGPATH_W) '$(srcdir)/evhttp/http.c'; fi`

forked_daapd-ffmpeg_url_evbuffer.o: ffmpeg_url_evbuffer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-ffmpeg_url_evbuffer.o -MD -MP -MF $(DEPDIR)/forked_daapd-ffmpeg_url_evbuffer.Tpo -c -o forked_daapd-ffmpeg_url_evbuffer.o `test -f 'ffmpeg_url_evbuffer.c' || echo '$(srcdir)/'`ffmpeg_url_evbuffer.c
	$(am__mv) $(DEPDIR)/forked_daapd-ffmpeg_url_evbuffer.Tpo $(DEPDIR)/forked_daapd-ffmpeg_url_evbuffer.Po
#	source='ffmpeg_url_evbuffer.c' object='forked_daapd-ffmpeg_url_evbuffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-ffmpeg_url_evbuffer.o `test -f 'ffmpeg_url_evbuffer.c' || echo '$(srcdir)/'`ffmpeg_url_evbuffer.c

forked_daapd-ffmpeg_url_evbuffer.obj: ffmpeg_url_evbuffer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-ffmpeg_url_evbuffer.obj -MD -MP -MF $(DEPDIR)/forked_daapd-ffmpeg_url_evbuffer.Tpo -c -o forked_daapd-ffmpeg_url_evbuffer.obj `if test -f 'ffmpeg_url_evbuffer.c'; then $(CYGPATH_W) 'ffmpeg_url_evbuffer.c'; else $(CYGPATH_W) '$(srcdir)/ffmpeg_url_evbuffer.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-ffmpeg_url_evbuffer.Tpo $(DEPDIR)/forked_daapd-ffmpeg_url_evbuffer.Po
#	source='ffmpeg_url_evbuffer.c' object='forked_daapd-ffmpeg_url_evbuffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-ffmpeg_url_evbuffer.obj `if test -f 'ffmpeg_url_evbuffer.c'; then $(CYGPATH_W) 'ffmpeg_url_evbuffer.c'; else $(CYGPATH_W) '$(srcdir)/ffmpeg_url_evbuffer.c'; fi`

forked_daapd-avio_evbuffer.o: avio_evbuffer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-avio_evbuffer.o -MD -MP -MF $(DEPDIR)/forked_daapd-avio_evbuffer.Tpo -c -o forked_daapd-avio_evbuffer.o `test -f 'avio_evbuffer.c' || echo '$(srcdir)/'`avio_evbuffer.c
	$(am__mv) $(DEPDIR)/forked_daapd-avio_evbuffer.Tpo $(DEPDIR)/forked_daapd-avio_evbuffer.Po
#	source='avio_evbuffer.c' object='forked_daapd-avio_evbuffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-avio_evbuffer.o `test -f 'avio_evbuffer.c' || echo '$(srcdir)/'`avio_evbuffer.c

forked_daapd-avio_evbuffer.obj: avio_evbuffer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-avio_evbuffer.obj -MD -MP -MF $(DEPDIR)/forked_daapd-avio_evbuffer.Tpo -c -o forked_daapd-avio_evbuffer.obj `if test -f 'avio_evbuffer.c'; then $(CYGPATH_W) 'avio_evbuffer.c'; else $(CYGPATH_W) '$(srcdir)/avio_evbuffer.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-avio_evbuffer.Tpo $(DEPDIR)/forked_daapd-avio_evbuffer.Po
#	source='avio_evbuffer.c' object='forked_daapd-avio_evbuffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-avio_evbuffer.obj `if test -f 'avio_evbuffer.c'; then $(CYGPATH_W) 'avio_evbuffer.c'; else $(CYGPATH_W) '$(srcdir)/avio_evbuffer.c'; fi`

forked_daapd-httpd.o: httpd.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd.o -MD -MP -MF $(DEPDIR)/forked_daapd-httpd.Tpo -c -o forked_daapd-httpd.o `test -f 'httpd.c' || echo '$(srcdir)/'`httpd.c
	$(am__mv) $(DEPDIR)/forked_daapd-httpd.Tpo $(DEPDIR)/forked_daapd-httpd.Po
#	source='httpd.c' object='forked_daapd-httpd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd.o `test -f 'httpd.c' || echo '$(srcdir)/'`httpd.c

forked_daapd-httpd.obj: httpd.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd.obj -MD -MP -MF $(DEPDIR)/forked_daapd-httpd.Tpo -c -o forked_daapd-httpd.obj `if test -f 'httpd.c'; then $(CYGPATH_W) 'httpd.c'; else $(CYGPATH_W) '$(srcdir)/httpd.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-httpd.Tpo $(DEPDIR)/forked_daapd-httpd.Po
#	source='httpd.c' object='forked_daapd-httpd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd.obj `if test -f 'httpd.c'; then $(CYGPATH_W) 'httpd.c'; else $(CYGPATH_W) '$(srcdir)/httpd.c'; fi`

forked_daapd-httpd_rsp.o: httpd_rsp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd_rsp.o -MD -MP -MF $(DEPDIR)/forked_daapd-httpd_rsp.Tpo -c -o forked_daapd-httpd_rsp.o `test -f 'httpd_rsp.c' || echo '$(srcdir)/'`httpd_rsp.c
	$(am__mv) $(DEPDIR)/forked_daapd-httpd_rsp.Tpo $(DEPDIR)/forked_daapd-httpd_rsp.Po
#	source='httpd_rsp.c' object='forked_daapd-httpd_rsp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd_rsp.o `test -f 'httpd_rsp.c' || echo '$(srcdir)/'`httpd_rsp.c

forked_daapd-httpd_rsp.obj: httpd_rsp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd_rsp.obj -MD -MP -MF $(DEPDIR)/forked_daapd-httpd_rsp.Tpo -c -o forked_daapd-httpd_rsp.obj `if test -f 'httpd_rsp.c'; then $(CYGPATH_W) 'httpd_rsp.c'; else $(CYGPATH_W) '$(srcdir)/httpd_rsp.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-httpd_rsp.Tpo $(DEPDIR)/forked_daapd-httpd_rsp.Po
#	source='httpd_rsp.c' object='forked_daapd-httpd_rsp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd_rsp.obj `if test -f 'httpd_rsp.c'; then $(CYGPATH_W) 'httpd_rsp.c'; else $(CYGPATH_W) '$(srcdir)/httpd_rsp.c'; fi`

forked_daapd-httpd_daap.o: httpd_daap.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd_daap.o -MD -MP -MF $(DEPDIR)/forked_daapd-httpd_daap.Tpo -c -o forked_daapd-httpd_daap.o `test -f 'httpd_daap.c' || echo '$(srcdir)/'`httpd_daap.c
	$(am__mv) $(DEPDIR)/forked_daapd-httpd_daap.Tpo $(DEPDIR)/forked_daapd-httpd_daap.Po
#	source='httpd_daap.c' object='forked_daapd-httpd_daap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd_daap.o `test -f 'httpd_daap.c' || echo '$(srcdir)/'`httpd_daap.c

forked_daapd-httpd_daap.obj: httpd_daap.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd_daap.obj -MD -MP -MF $(DEPDIR)/forked_daapd-httpd_daap.Tpo -c -o forked_daapd-httpd_daap.obj `if test -f 'httpd_daap.c'; then $(CYGPATH_W) 'httpd_daap.c'; else $(CYGPATH_W) '$(srcdir)/httpd_daap.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-httpd_daap.Tpo $(DEPDIR)/forked_daapd-httpd_daap.Po
#	source='httpd_daap.c' object='forked_daapd-httpd_daap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd_daap.obj `if test -f 'httpd_daap.c'; then $(CYGPATH_W) 'httpd_daap.c'; else $(CYGPATH_W) '$(srcdir)/httpd_daap.c'; fi`

forked_daapd-httpd_dacp.o: httpd_dacp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd_dacp.o -MD -MP -MF $(DEPDIR)/forked_daapd-httpd_dacp.Tpo -c -o forked_daapd-httpd_dacp.o `test -f 'httpd_dacp.c' || echo '$(srcdir)/'`httpd_dacp.c
	$(am__mv) $(DEPDIR)/forked_daapd-httpd_dacp.Tpo $(DEPDIR)/forked_daapd-httpd_dacp.Po
#	source='httpd_dacp.c' object='forked_daapd-httpd_dacp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd_dacp.o `test -f 'httpd_dacp.c' || echo '$(srcdir)/'`httpd_dacp.c

forked_daapd-httpd_dacp.obj: httpd_dacp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-httpd_dacp.obj -MD -MP -MF $(DEPDIR)/forked_daapd-httpd_dacp.Tpo -c -o forked_daapd-httpd_dacp.obj `if test -f 'httpd_dacp.c'; then $(CYGPATH_W) 'httpd_dacp.c'; else $(CYGPATH_W) '$(srcdir)/httpd_dacp.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-httpd_dacp.Tpo $(DEPDIR)/forked_daapd-httpd_dacp.Po
#	source='httpd_dacp.c' object='forked_daapd-httpd_dacp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-httpd_dacp.obj `if test -f 'httpd_dacp.c'; then $(CYGPATH_W) 'httpd_dacp.c'; else $(CYGPATH_W) '$(srcdir)/httpd_dacp.c'; fi`

forked_daapd-dmap_common.o: dmap_common.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-dmap_common.o -MD -MP -MF $(DEPDIR)/forked_daapd-dmap_common.Tpo -c -o forked_daapd-dmap_common.o `test -f 'dmap_common.c' || echo '$(srcdir)/'`dmap_common.c
	$(am__mv) $(DEPDIR)/forked_daapd-dmap_common.Tpo $(DEPDIR)/forked_daapd-dmap_common.Po
#	source='dmap_common.c' object='forked_daapd-dmap_common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-dmap_common.o `test -f 'dmap_common.c' || echo '$(srcdir)/'`dmap_common.c

forked_daapd-dmap_common.obj: dmap_common.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-dmap_common.obj -MD -MP -MF $(DEPDIR)/forked_daapd-dmap_common.Tpo -c -o forked_daapd-dmap_common.obj `if test -f 'dmap_common.c'; then $(CYGPATH_W) 'dmap_common.c'; else $(CYGPATH_W) '$(srcdir)/dmap_common.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-dmap_common.Tpo $(DEPDIR)/forked_daapd-dmap_common.Po
#	source='dmap_common.c' object='forked_daapd-dmap_common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-dmap_common.obj `if test -f 'dmap_common.c'; then $(CYGPATH_W) 'dmap_common.c'; else $(CYGPATH_W) '$(srcdir)/dmap_common.c'; fi`

forked_daapd-transcode.o: transcode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-transcode.o -MD -MP -MF $(DEPDIR)/forked_daapd-transcode.Tpo -c -o forked_daapd-transcode.o `test -f 'transcode.c' || echo '$(srcdir)/'`transcode.c
	$(am__mv) $(DEPDIR)/forked_daapd-transcode.Tpo $(DEPDIR)/forked_daapd-transcode.Po
#	source='transcode.c' object='forked_daapd-transcode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-transcode.o `test -f 'transcode.c' || echo '$(srcdir)/'`transcode.c

forked_daapd-transcode.obj: transcode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-transcode.obj -MD -MP -MF $(DEPDIR)/forked_daapd-transcode.Tpo -c -o forked_daapd-transcode.obj `if test -f 'transcode.c'; then $(CYGPATH_W) 'transcode.c'; else $(CYGPATH_W) '$(srcdir)/transcode.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-transcode.Tpo $(DEPDIR)/forked_daapd-transcode.Po
#	source='transcode.c' object='forked_daapd-transcode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-transcode.obj `if test -f 'transcode.c'; then $(CYGPATH_W) 'transcode.c'; else $(CYGPATH_W) '$(srcdir)/transcode.c'; fi`

forked_daapd-artwork.o: artwork.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-artwork.o -MD -MP -MF $(DEPDIR)/forked_daapd-artwork.Tpo -c -o forked_daapd-artwork.o `test -f 'artwork.c' || echo '$(srcdir)/'`artwork.c
	$(am__mv) $(DEPDIR)/forked_daapd-artwork.Tpo $(DEPDIR)/forked_daapd-artwork.Po
#	source='artwork.c' object='forked_daapd-artwork.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-artwork.o `test -f 'artwork.c' || echo '$(srcdir)/'`artwork.c

forked_daapd-artwork.obj: artwork.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-artwork.obj -MD -MP -MF $(DEPDIR)/forked_daapd-artwork.Tpo -c -o forked_daapd-artwork.obj `if test -f 'artwork.c'; then $(CYGPATH_W) 'artwork.c'; else $(CYGPATH_W) '$(srcdir)/artwork.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-artwork.Tpo $(DEPDIR)/forked_daapd-artwork.Po
#	source='artwork.c' object='forked_daapd-artwork.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-artwork.obj `if test -f 'artwork.c'; then $(CYGPATH_W) 'artwork.c'; else $(CYGPATH_W) '$(srcdir)/artwork.c'; fi`

forked_daapd-misc.o: misc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-misc.o -MD -MP -MF $(DEPDIR)/forked_daapd-misc.Tpo -c -o forked_daapd-misc.o `test -f 'misc.c' || echo '$(srcdir)/'`misc.c
	$(am__mv) $(DEPDIR)/forked_daapd-misc.Tpo $(DEPDIR)/forked_daapd-misc.Po
#	source='misc.c' object='forked_daapd-misc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-misc.o `test -f 'misc.c' || echo '$(srcdir)/'`misc.c

forked_daapd-misc.obj: misc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-misc.obj -MD -MP -MF $(DEPDIR)/forked_daapd-misc.Tpo -c -o forked_daapd-misc.obj `if test -f 'misc.c'; then $(CYGPATH_W) 'misc.c'; else $(CYGPATH_W) '$(srcdir)/misc.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-misc.Tpo $(DEPDIR)/forked_daapd-misc.Po
#	source='misc.c' object='forked_daapd-misc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-misc.obj `if test -f 'misc.c'; then $(CYGPATH_W) 'misc.c'; else $(CYGPATH_W) '$(srcdir)/misc.c'; fi`

forked_daapd-rng.o: rng.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-rng.o -MD -MP -MF $(DEPDIR)/forked_daapd-rng.Tpo -c -o forked_daapd-rng.o `test -f 'rng.c' || echo '$(srcdir)/'`rng.c
	$(am__mv) $(DEPDIR)/forked_daapd-rng.Tpo $(DEPDIR)/forked_daapd-rng.Po
#	source='rng.c' object='forked_daapd-rng.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-rng.o `test -f 'rng.c' || echo '$(srcdir)/'`rng.c

forked_daapd-rng.obj: rng.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-rng.obj -MD -MP -MF $(DEPDIR)/forked_daapd-rng.Tpo -c -o forked_daapd-rng.obj `if test -f 'rng.c'; then $(CYGPATH_W) 'rng.c'; else $(CYGPATH_W) '$(srcdir)/rng.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-rng.Tpo $(DEPDIR)/forked_daapd-rng.Po
#	source='rng.c' object='forked_daapd-rng.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-rng.obj `if test -f 'rng.c'; then $(CYGPATH_W) 'rng.c'; else $(CYGPATH_W) '$(srcdir)/rng.c'; fi`

forked_daapd-rsp_query.o: rsp_query.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-rsp_query.o -MD -MP -MF $(DEPDIR)/forked_daapd-rsp_query.Tpo -c -o forked_daapd-rsp_query.o `test -f 'rsp_query.c' || echo '$(srcdir)/'`rsp_query.c
	$(am__mv) $(DEPDIR)/forked_daapd-rsp_query.Tpo $(DEPDIR)/forked_daapd-rsp_query.Po
#	source='rsp_query.c' object='forked_daapd-rsp_query.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-rsp_query.o `test -f 'rsp_query.c' || echo '$(srcdir)/'`rsp_query.c

forked_daapd-rsp_query.obj: rsp_query.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-rsp_query.obj -MD -MP -MF $(DEPDIR)/forked_daapd-rsp_query.Tpo -c -o forked_daapd-rsp_query.obj `if test -f 'rsp_query.c'; then $(CYGPATH_W) 'rsp_query.c'; else $(CYGPATH_W) '$(srcdir)/rsp_query.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-rsp_query.Tpo $(DEPDIR)/forked_daapd-rsp_query.Po
#	source='rsp_query.c' object='forked_daapd-rsp_query.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-rsp_query.obj `if test -f 'rsp_query.c'; then $(CYGPATH_W) 'rsp_query.c'; else $(CYGPATH_W) '$(srcdir)/rsp_query.c'; fi`

forked_daapd-daap_query.o: daap_query.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-daap_query.o -MD -MP -MF $(DEPDIR)/forked_daapd-daap_query.Tpo -c -o forked_daapd-daap_query.o `test -f 'daap_query.c' || echo '$(srcdir)/'`daap_query.c
	$(am__mv) $(DEPDIR)/forked_daapd-daap_query.Tpo $(DEPDIR)/forked_daapd-daap_query.Po
#	source='daap_query.c' object='forked_daapd-daap_query.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-daap_query.o `test -f 'daap_query.c' || echo '$(srcdir)/'`daap_query.c

forked_daapd-daap_query.obj: daap_query.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-daap_query.obj -MD -MP -MF $(DEPDIR)/forked_daapd-daap_query.Tpo -c -o forked_daapd-daap_query.obj `if test -f 'daap_query.c'; then $(CYGPATH_W) 'daap_query.c'; else $(CYGPATH_W) '$(srcdir)/daap_query.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-daap_query.Tpo $(DEPDIR)/forked_daapd-daap_query.Po
#	source='daap_query.c' object='forked_daapd-daap_query.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-daap_query.obj `if test -f 'daap_query.c'; then $(CYGPATH_W) 'daap_query.c'; else $(CYGPATH_W) '$(srcdir)/daap_query.c'; fi`

forked_daapd-player.o: player.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-player.o -MD -MP -MF $(DEPDIR)/forked_daapd-player.Tpo -c -o forked_daapd-player.o `test -f 'player.c' || echo '$(srcdir)/'`player.c
	$(am__mv) $(DEPDIR)/forked_daapd-player.Tpo $(DEPDIR)/forked_daapd-player.Po
#	source='player.c' object='forked_daapd-player.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-player.o `test -f 'player.c' || echo '$(srcdir)/'`player.c

forked_daapd-player.obj: player.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-player.obj -MD -MP -MF $(DEPDIR)/forked_daapd-player.Tpo -c -o forked_daapd-player.obj `if test -f 'player.c'; then $(CYGPATH_W) 'player.c'; else $(CYGPATH_W) '$(srcdir)/player.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-player.Tpo $(DEPDIR)/forked_daapd-player.Po
#	source='player.c' object='forked_daapd-player.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-player.obj `if test -f 'player.c'; then $(CYGPATH_W) 'player.c'; else $(CYGPATH_W) '$(srcdir)/player.c'; fi`

forked_daapd-laudio_alsa.o: laudio_alsa.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-laudio_alsa.o -MD -MP -MF $(DEPDIR)/forked_daapd-laudio_alsa.Tpo -c -o forked_daapd-laudio_alsa.o `test -f 'laudio_alsa.c' || echo '$(srcdir)/'`laudio_alsa.c
	$(am__mv) $(DEPDIR)/forked_daapd-laudio_alsa.Tpo $(DEPDIR)/forked_daapd-laudio_alsa.Po
#	source='laudio_alsa.c' object='forked_daapd-laudio_alsa.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-laudio_alsa.o `test -f 'laudio_alsa.c' || echo '$(srcdir)/'`laudio_alsa.c

forked_daapd-laudio_alsa.obj: laudio_alsa.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-laudio_alsa.obj -MD -MP -MF $(DEPDIR)/forked_daapd-laudio_alsa.Tpo -c -o forked_daapd-laudio_alsa.obj `if test -f 'laudio_alsa.c'; then $(CYGPATH_W) 'laudio_alsa.c'; else $(CYGPATH_W) '$(srcdir)/laudio_alsa.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-laudio_alsa.Tpo $(DEPDIR)/forked_daapd-laudio_alsa.Po
#	source='laudio_alsa.c' object='forked_daapd-laudio_alsa.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-laudio_alsa.obj `if test -f 'laudio_alsa.c'; then $(CYGPATH_W) 'laudio_alsa.c'; else $(CYGPATH_W) '$(srcdir)/laudio_alsa.c'; fi`

forked_daapd-laudio_oss4.o: laudio_oss4.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-laudio_oss4.o -MD -MP -MF $(DEPDIR)/forked_daapd-laudio_oss4.Tpo -c -o forked_daapd-laudio_oss4.o `test -f 'laudio_oss4.c' || echo '$(srcdir)/'`laudio_oss4.c
	$(am__mv) $(DEPDIR)/forked_daapd-laudio_oss4.Tpo $(DEPDIR)/forked_daapd-laudio_oss4.Po
#	source='laudio_oss4.c' object='forked_daapd-laudio_oss4.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-laudio_oss4.o `test -f 'laudio_oss4.c' || echo '$(srcdir)/'`laudio_oss4.c

forked_daapd-laudio_oss4.obj: laudio_oss4.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-laudio_oss4.obj -MD -MP -MF $(DEPDIR)/forked_daapd-laudio_oss4.Tpo -c -o forked_daapd-laudio_oss4.obj `if test -f 'laudio_oss4.c'; then $(CYGPATH_W) 'laudio_oss4.c'; else $(CYGPATH_W) '$(srcdir)/laudio_oss4.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-laudio_oss4.Tpo $(DEPDIR)/forked_daapd-laudio_oss4.Po
#	source='laudio_oss4.c' object='forked_daapd-laudio_oss4.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-laudio_oss4.obj `if test -f 'laudio_oss4.c'; then $(CYGPATH_W) 'laudio_oss4.c'; else $(CYGPATH_W) '$(srcdir)/laudio_oss4.c'; fi`

forked_daapd-raop.o: raop.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-raop.o -MD -MP -MF $(DEPDIR)/forked_daapd-raop.Tpo -c -o forked_daapd-raop.o `test -f 'raop.c' || echo '$(srcdir)/'`raop.c
	$(am__mv) $(DEPDIR)/forked_daapd-raop.Tpo $(DEPDIR)/forked_daapd-raop.Po
#	source='raop.c' object='forked_daapd-raop.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-raop.o `test -f 'raop.c' || echo '$(srcdir)/'`raop.c

forked_daapd-raop.obj: raop.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-raop.obj -MD -MP -MF $(DEPDIR)/forked_daapd-raop.Tpo -c -o forked_daapd-raop.obj `if test -f 'raop.c'; then $(CYGPATH_W) 'raop.c'; else $(CYGPATH_W) '$(srcdir)/raop.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-raop.Tpo $(DEPDIR)/forked_daapd-raop.Po
#	source='raop.c' object='forked_daapd-raop.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-raop.obj `if test -f 'raop.c'; then $(CYGPATH_W) 'raop.c'; else $(CYGPATH_W) '$(srcdir)/raop.c'; fi`

forked_daapd-rtsp.o: evrtsp/rtsp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-rtsp.o -MD -MP -MF $(DEPDIR)/forked_daapd-rtsp.Tpo -c -o forked_daapd-rtsp.o `test -f 'evrtsp/rtsp.c' || echo '$(srcdir)/'`evrtsp/rtsp.c
	$(am__mv) $(DEPDIR)/forked_daapd-rtsp.Tpo $(DEPDIR)/forked_daapd-rtsp.Po
#	source='evrtsp/rtsp.c' object='forked_daapd-rtsp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-rtsp.o `test -f 'evrtsp/rtsp.c' || echo '$(srcdir)/'`evrtsp/rtsp.c

forked_daapd-rtsp.obj: evrtsp/rtsp.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-rtsp.obj -MD -MP -MF $(DEPDIR)/forked_daapd-rtsp.Tpo -c -o forked_daapd-rtsp.obj `if test -f 'evrtsp/rtsp.c'; then $(CYGPATH_W) 'evrtsp/rtsp.c'; else $(CYGPATH_W) '$(srcdir)/evrtsp/rtsp.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-rtsp.Tpo $(DEPDIR)/forked_daapd-rtsp.Po
#	source='evrtsp/rtsp.c' object='forked_daapd-rtsp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-rtsp.obj `if test -f 'evrtsp/rtsp.c'; then $(CYGPATH_W) 'evrtsp/rtsp.c'; else $(CYGPATH_W) '$(srcdir)/evrtsp/rtsp.c'; fi`

forked_daapd-scan-wma.o: scan-wma.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-scan-wma.o -MD -MP -MF $(DEPDIR)/forked_daapd-scan-wma.Tpo -c -o forked_daapd-scan-wma.o `test -f 'scan-wma.c' || echo '$(srcdir)/'`scan-wma.c
	$(am__mv) $(DEPDIR)/forked_daapd-scan-wma.Tpo $(DEPDIR)/forked_daapd-scan-wma.Po
#	source='scan-wma.c' object='forked_daapd-scan-wma.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-scan-wma.o `test -f 'scan-wma.c' || echo '$(srcdir)/'`scan-wma.c

forked_daapd-scan-wma.obj: scan-wma.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-scan-wma.obj -MD -MP -MF $(DEPDIR)/forked_daapd-scan-wma.Tpo -c -o forked_daapd-scan-wma.obj `if test -f 'scan-wma.c'; then $(CYGPATH_W) 'scan-wma.c'; else $(CYGPATH_W) '$(srcdir)/scan-wma.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-scan-wma.Tpo $(DEPDIR)/forked_daapd-scan-wma.Po
#	source='scan-wma.c' object='forked_daapd-scan-wma.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-scan-wma.obj `if test -f 'scan-wma.c'; then $(CYGPATH_W) 'scan-wma.c'; else $(CYGPATH_W) '$(srcdir)/scan-wma.c'; fi`

forked_daapd-scan-flac.o: scan-flac.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-scan-flac.o -MD -MP -MF $(DEPDIR)/forked_daapd-scan-flac.Tpo -c -o forked_daapd-scan-flac.o `test -f 'scan-flac.c' || echo '$(srcdir)/'`scan-flac.c
	$(am__mv) $(DEPDIR)/forked_daapd-scan-flac.Tpo $(DEPDIR)/forked_daapd-scan-flac.Po
#	source='scan-flac.c' object='forked_daapd-scan-flac.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-scan-flac.o `test -f 'scan-flac.c' || echo '$(srcdir)/'`scan-flac.c

forked_daapd-scan-flac.obj: scan-flac.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-scan-flac.obj -MD -MP -MF $(DEPDIR)/forked_daapd-scan-flac.Tpo -c -o forked_daapd-scan-flac.obj `if test -f 'scan-flac.c'; then $(CYGPATH_W) 'scan-flac.c'; else $(CYGPATH_W) '$(srcdir)/scan-flac.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-scan-flac.Tpo $(DEPDIR)/forked_daapd-scan-flac.Po
#	source='scan-flac.c' object='forked_daapd-scan-flac.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-scan-flac.obj `if test -f 'scan-flac.c'; then $(CYGPATH_W) 'scan-flac.c'; else $(CYGPATH_W) '$(srcdir)/scan-flac.c'; fi`

forked_daapd-scan-mpc.o: scan-mpc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-scan-mpc.o -MD -MP -MF $(DEPDIR)/forked_daapd-scan-mpc.Tpo -c -o forked_daapd-scan-mpc.o `test -f 'scan-mpc.c' || echo '$(srcdir)/'`scan-mpc.c
	$(am__mv) $(DEPDIR)/forked_daapd-scan-mpc.Tpo $(DEPDIR)/forked_daapd-scan-mpc.Po
#	source='scan-mpc.c' object='forked_daapd-scan-mpc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-scan-mpc.o `test -f 'scan-mpc.c' || echo '$(srcdir)/'`scan-mpc.c

forked_daapd-scan-mpc.obj: scan-mpc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-scan-mpc.obj -MD -MP -MF $(DEPDIR)/forked_daapd-scan-mpc.Tpo -c -o forked_daapd-scan-mpc.obj `if test -f 'scan-mpc.c'; then $(CYGPATH_W) 'scan-mpc.c'; else $(CYGPATH_W) '$(srcdir)/scan-mpc.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-scan-mpc.Tpo $(DEPDIR)/forked_daapd-scan-mpc.Po
#	source='scan-mpc.c' object='forked_daapd-scan-mpc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-scan-mpc.obj `if test -f 'scan-mpc.c'; then $(CYGPATH_W) 'scan-mpc.c'; else $(CYGPATH_W) '$(srcdir)/scan-mpc.c'; fi`

forked_daapd-RSPLexer.o: RSPLexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-RSPLexer.o -MD -MP -MF $(DEPDIR)/forked_daapd-RSPLexer.Tpo -c -o forked_daapd-RSPLexer.o `test -f 'RSPLexer.c' || echo '$(srcdir)/'`RSPLexer.c
	$(am__mv) $(DEPDIR)/forked_daapd-RSPLexer.Tpo $(DEPDIR)/forked_daapd-RSPLexer.Po
#	source='RSPLexer.c' object='forked_daapd-RSPLexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-RSPLexer.o `test -f 'RSPLexer.c' || echo '$(srcdir)/'`RSPLexer.c

forked_daapd-RSPLexer.obj: RSPLexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-RSPLexer.obj -MD -MP -MF $(DEPDIR)/forked_daapd-RSPLexer.Tpo -c -o forked_daapd-RSPLexer.obj `if test -f 'RSPLexer.c'; then $(CYGPATH_W) 'RSPLexer.c'; else $(CYGPATH_W) '$(srcdir)/RSPLexer.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-RSPLexer.Tpo $(DEPDIR)/forked_daapd-RSPLexer.Po
#	source='RSPLexer.c' object='forked_daapd-RSPLexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-RSPLexer.obj `if test -f 'RSPLexer.c'; then $(CYGPATH_W) 'RSPLexer.c'; else $(CYGPATH_W) '$(srcdir)/RSPLexer.c'; fi`

forked_daapd-RSPParser.o: RSPParser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-RSPParser.o -MD -MP -MF $(DEPDIR)/forked_daapd-RSPParser.Tpo -c -o forked_daapd-RSPParser.o `test -f 'RSPParser.c' || echo '$(srcdir)/'`RSPParser.c
	$(am__mv) $(DEPDIR)/forked_daapd-RSPParser.Tpo $(DEPDIR)/forked_daapd-RSPParser.Po
#	source='RSPParser.c' object='forked_daapd-RSPParser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-RSPParser.o `test -f 'RSPParser.c' || echo '$(srcdir)/'`RSPParser.c

forked_daapd-RSPParser.obj: RSPParser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-RSPParser.obj -MD -MP -MF $(DEPDIR)/forked_daapd-RSPParser.Tpo -c -o forked_daapd-RSPParser.obj `if test -f 'RSPParser.c'; then $(CYGPATH_W) 'RSPParser.c'; else $(CYGPATH_W) '$(srcdir)/RSPParser.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-RSPParser.Tpo $(DEPDIR)/forked_daapd-RSPParser.Po
#	source='RSPParser.c' object='forked_daapd-RSPParser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-RSPParser.obj `if test -f 'RSPParser.c'; then $(CYGPATH_W) 'RSPParser.c'; else $(CYGPATH_W) '$(srcdir)/RSPParser.c'; fi`

forked_daapd-RSP2SQL.o: RSP2SQL.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-RSP2SQL.o -MD -MP -MF $(DEPDIR)/forked_daapd-RSP2SQL.Tpo -c -o forked_daapd-RSP2SQL.o `test -f 'RSP2SQL.c' || echo '$(srcdir)/'`RSP2SQL.c
	$(am__mv) $(DEPDIR)/forked_daapd-RSP2SQL.Tpo $(DEPDIR)/forked_daapd-RSP2SQL.Po
#	source='RSP2SQL.c' object='forked_daapd-RSP2SQL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-RSP2SQL.o `test -f 'RSP2SQL.c' || echo '$(srcdir)/'`RSP2SQL.c

forked_daapd-RSP2SQL.obj: RSP2SQL.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-RSP2SQL.obj -MD -MP -MF $(DEPDIR)/forked_daapd-RSP2SQL.Tpo -c -o forked_daapd-RSP2SQL.obj `if test -f 'RSP2SQL.c'; then $(CYGPATH_W) 'RSP2SQL.c'; else $(CYGPATH_W) '$(srcdir)/RSP2SQL.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-RSP2SQL.Tpo $(DEPDIR)/forked_daapd-RSP2SQL.Po
#	source='RSP2SQL.c' object='forked_daapd-RSP2SQL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-RSP2SQL.obj `if test -f 'RSP2SQL.c'; then $(CYGPATH_W) 'RSP2SQL.c'; else $(CYGPATH_W) '$(srcdir)/RSP2SQL.c'; fi`

forked_daapd-DAAPLexer.o: DAAPLexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-DAAPLexer.o -MD -MP -MF $(DEPDIR)/forked_daapd-DAAPLexer.Tpo -c -o forked_daapd-DAAPLexer.o `test -f 'DAAPLexer.c' || echo '$(srcdir)/'`DAAPLexer.c
	$(am__mv) $(DEPDIR)/forked_daapd-DAAPLexer.Tpo $(DEPDIR)/forked_daapd-DAAPLexer.Po
#	source='DAAPLexer.c' object='forked_daapd-DAAPLexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-DAAPLexer.o `test -f 'DAAPLexer.c' || echo '$(srcdir)/'`DAAPLexer.c

forked_daapd-DAAPLexer.obj: DAAPLexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-DAAPLexer.obj -MD -MP -MF $(DEPDIR)/forked_daapd-DAAPLexer.Tpo -c -o forked_daapd-DAAPLexer.obj `if test -f 'DAAPLexer.c'; then $(CYGPATH_W) 'DAAPLexer.c'; else $(CYGPATH_W) '$(srcdir)/DAAPLexer.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-DAAPLexer.Tpo $(DEPDIR)/forked_daapd-DAAPLexer.Po
#	source='DAAPLexer.c' object='forked_daapd-DAAPLexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-DAAPLexer.obj `if test -f 'DAAPLexer.c'; then $(CYGPATH_W) 'DAAPLexer.c'; else $(CYGPATH_W) '$(srcdir)/DAAPLexer.c'; fi`

forked_daapd-DAAPParser.o: DAAPParser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-DAAPParser.o -MD -MP -MF $(DEPDIR)/forked_daapd-DAAPParser.Tpo -c -o forked_daapd-DAAPParser.o `test -f 'DAAPParser.c' || echo '$(srcdir)/'`DAAPParser.c
	$(am__mv) $(DEPDIR)/forked_daapd-DAAPParser.Tpo $(DEPDIR)/forked_daapd-DAAPParser.Po
#	source='DAAPParser.c' object='forked_daapd-DAAPParser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-DAAPParser.o `test -f 'DAAPParser.c' || echo '$(srcdir)/'`DAAPParser.c

forked_daapd-DAAPParser.obj: DAAPParser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-DAAPParser.obj -MD -MP -MF $(DEPDIR)/forked_daapd-DAAPParser.Tpo -c -o forked_daapd-DAAPParser.obj `if test -f 'DAAPParser.c'; then $(CYGPATH_W) 'DAAPParser.c'; else $(CYGPATH_W) '$(srcdir)/DAAPParser.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-DAAPParser.Tpo $(DEPDIR)/forked_daapd-DAAPParser.Po
#	source='DAAPParser.c' object='forked_daapd-DAAPParser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-DAAPParser.obj `if test -f 'DAAPParser.c'; then $(CYGPATH_W) 'DAAPParser.c'; else $(CYGPATH_W) '$(srcdir)/DAAPParser.c'; fi`

forked_daapd-DAAP2SQL.o: DAAP2SQL.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-DAAP2SQL.o -MD -MP -MF $(DEPDIR)/forked_daapd-DAAP2SQL.Tpo -c -o forked_daapd-DAAP2SQL.o `test -f 'DAAP2SQL.c' || echo '$(srcdir)/'`DAAP2SQL.c
	$(am__mv) $(DEPDIR)/forked_daapd-DAAP2SQL.Tpo $(DEPDIR)/forked_daapd-DAAP2SQL.Po
#	source='DAAP2SQL.c' object='forked_daapd-DAAP2SQL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-DAAP2SQL.o `test -f 'DAAP2SQL.c' || echo '$(srcdir)/'`DAAP2SQL.c

forked_daapd-DAAP2SQL.obj: DAAP2SQL.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -MT forked_daapd-DAAP2SQL.obj -MD -MP -MF $(DEPDIR)/forked_daapd-DAAP2SQL.Tpo -c -o forked_daapd-DAAP2SQL.obj `if test -f 'DAAP2SQL.c'; then $(CYGPATH_W) 'DAAP2SQL.c'; else $(CYGPATH_W) '$(srcdir)/DAAP2SQL.c'; fi`
	$(am__mv) $(DEPDIR)/forked_daapd-DAAP2SQL.Tpo $(DEPDIR)/forked_daapd-DAAP2SQL.Po
#	source='DAAP2SQL.c' object='forked_daapd-DAAP2SQL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(forked_daapd_CPPFLAGS) $(CPPFLAGS) $(forked_daapd_CFLAGS) $(CFLAGS) -c -o forked_daapd-DAAP2SQL.obj `if test -f 'DAAP2SQL.c'; then $(CYGPATH_W) 'DAAP2SQL.c'; else $(CYGPATH_W) '$(srcdir)/DAAP2SQL.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(sbindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libtool clean-sbinPROGRAMS \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-sbinPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-sbinPROGRAMS

.MAKE: all check install install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-sbinPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-sbinPROGRAMS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-sbinPROGRAMS


# gperf construction rules
%_hash.c: %.gperf
	if $(GPERF) $< > $@.tmp; then \
		mv $@.tmp $@; \
	elif $(GPERF) --version >/dev/null 2>&1; then \
		rm $@.tmp; \
		exit 1; \
	else \
		rm $@.tmp; \
		touch $@; \
	fi

#%.tokens %.c %Lexer.c %Parser.c %Lexer.h %Parser.h %.h: %.g
#	$(ANTLR) $(ANTLR_OPTIONS) $<

#%.u: %.g
#	$(ANTLR) -depend $< > $@
#	@echo -n "ANTLR_PRODUCTS += " > $@.tmp
#	@grep : $@ | cut -d : -f 1 | tr -d ' ' | { while read f; do test "$$f" != "$<" && echo -n "$$f "; done } >> $@.tmp
#	@cat $@.tmp >> $@
#	@rm $@.tmp

-include $(ANTLR_GRAMMARS:.g=.u)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
